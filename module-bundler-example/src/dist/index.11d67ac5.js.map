{"mappings":"AEAO,SAAS,0CAAO,SAAS,EAAE,OAAO;IACrC,IAAI,CAAC,WACD,MAAM,IAAI,MAAM,CAAC,kBAAkB,EAAE,SAAS;AAEtD;;;ADFO,SAAS,0CAAU,CAAC;IACvB,CAAA,GAAA,yCAAK,EAAE,KAAK,GAAG;IAEf,IAAI,MAAM,KAAK,MAAM,GACjB,OAAO;IAEX,OAAO,IAAI,0CAAU,IAAI;AAC7B;;;;AEPO,SAAS,0CAAU,CAAC;IACvB,CAAA,GAAA,yCAAK,EAAE,KAAK,GAAG;IAEf,IAAI,MAAM,GACN,OAAO;IAGX,IAAI,MAAM,KAAK,MAAM,GACjB,OAAO;IAGX,kEAAkE;IAClE,OAAO,0CAAU,IAAI,KAAK,0CAAU,IAAI;AAC5C;;;AHZA,MAAM,qCAAe,SAAS,aAAa,CAAC;AAC5C,MAAM,sCAAgB,SAAS,aAAa,CAAC;AAE7C,SAAS,aAAa,CAAC,qBAAqB,gBAAgB,CAAC,SAAS;AACtE,SAAS,aAAa,CAAC,qBAAqB,gBAAgB,CAAC,SAAS;AAEtE,SAAS;IACL,MAAM,QAAQ,mCAAa,aAAa;IAExC,MAAM,SAAS,CAAA,GAAA,yCAAQ,EAAE;IACzB,oCAAc,SAAS,GAAG,OAAO,cAAc;AACnD;AAEA,SAAS;IACL,MAAM,QAAQ,mCAAa,aAAa;IAExC,MAAM,SAAS,CAAA,GAAA,yCAAQ,EAAE;IACzB,oCAAc,SAAS,GAAG,OAAO,cAAc;AACnD","sources":["scripts/index.js","scripts/factorial.js","scripts/assert.js","scripts/fibonacci.js"],"sourcesContent":["import { factorial } from \"./factorial.js\";\nimport { fibonacci } from \"./fibonacci.js\";\n\nconst inputElement = document.querySelector(\".input-value\");\nconst resultElement = document.querySelector(\".result\");\n\ndocument.querySelector(\".factorial-button\").addEventListener(\"click\", calculateFactorial);\ndocument.querySelector(\".fibonacci-button\").addEventListener(\"click\", calculateFibonacci);\n\nfunction calculateFactorial() {\n    const input = inputElement.valueAsNumber;\n    \n    const result = factorial(input);\n    resultElement.innerHTML = result.toLocaleString();\n}\n\nfunction calculateFibonacci() {\n    const input = inputElement.valueAsNumber;\n\n    const result = fibonacci(input);\n    resultElement.innerHTML = result.toLocaleString();\n}","import { assert } from \"./assert.js\";\n\nexport function factorial(n) {\n    assert(n >= 0, \"n must be greater than zero\");\n\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}","export function assert(condition, message) {\n    if (!condition) {\n        throw new Error(`Assertion failed: ${message}`);\n    }\n}","import { assert } from \"./assert.js\";\n\nexport function fibonacci(n) {\n    assert(n >= 0, \"n must be greater than zero\");\n\n    if (n === 0) {\n        return 0;\n    }\n\n    if (n === 1 || n === 2) {\n        return 1;\n    }\n\n    // Intentionally inefficient. See the web worker bundling example.\n    return fibonacci(n - 1) + fibonacci(n - 2);\n}"],"names":[],"version":3,"file":"index.11d67ac5.js.map"}